<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:ev="http://www.w3.org/2001/xml-events"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xformsUtils="java:org.orbeon.oxf.xforms.XFormsUtils">

    <!--
        Component to represent a reusable error summary.

        NOTE: There is some complexity because what we are trying to do is keep a structure that mimics part of the UI.
        Having support for <xf:function> would help with reuse and clarity!
     -->
    <xbl:binding id="fr-error-summary-binding" element="fr|error-summary">
        <xbl:resources>
            <xbl:style>
                .xbl-fr-error-summary { clear: both; width: 100%; padding: 0 }
                .xbl-fr-error-summary .fr-error-title { display: block; padding: .3em }
                .xbl-fr-error-summary .fr-error-summary-body { display: block }
                .xbl-fr-error-summary .fr-error-list li { margin-bottom: .5em }
                .xbl-fr-error-summary .fr-error-alert { color: red }
            </xbl:style>
        </xbl:resources>
        <xbl:handlers>
            <xbl:handler event="fr-visit-all" phase="target">
                <!-- Mark all controls as visited -->
                <xxf:setvisited iterate="tokenize(instance('fr-state-instance')/observer, '\s+')" control="{.}" visited="true" recurse="true"/>
                <!-- There is no dependency handling with the xxf:visited() function. -->
                <xf:recalculate/>
            </xbl:handler>
            <xbl:handler event="fr-unvisit-all" phase="target">`
                <!-- Mark all controls as not visited -->
                <xxf:setvisited iterate="tokenize(instance('fr-state-instance')/observer, '\s+')" control="{.}" visited="false" recurse="true"/>
                <!-- There is no dependency handling with the xxf:visited() function. -->
                <xf:recalculate/>
            </xbl:handler>
            <xbl:handler event="fr-update" phase="target">
                <!-- Update errors in non-incremental mode -->
                <xf:delete ref="instance('fr-snapshot-instance')/*"/>
                <xf:insert context="instance('fr-snapshot-instance')" origin="instance('fr-errors-instance')/*"/>
            </xbl:handler>
            <xbl:handler event="fr-clear" phase="target">`
                <!-- Clear all errors in non-incremental mode -->
                <xf:delete ref="instance('fr-snapshot-instance')/*"/>
            </xbl:handler>
        </xbl:handlers>
        <xbl:implementation>
            <xf:model id="fr-error-summary-model">

                <!-- Reset everything upon initialization -->
                <xf:action ev:event="xforms-model-construct-done">
                    <xf:delete ref="instance('fr-errors-instance')/*"/>
                </xf:action>

                <!-- Instance containing the current errors -->
                <xf:instance id="fr-errors-instance">
                    <errors xmlns=""/>
                </xf:instance>

                <!-- Instance containing the visible errors (for non-incremental mode) -->
                <xf:instance id="fr-snapshot-instance">
                    <errors xmlns=""/>
                </xf:instance>

                <!-- Template for error information -->
                <xf:instance id="fr-error-template" xxf:readonly="true">
                    <error xmlns="" id="" position="" repeats="" indexes="" label="" alert="" binds=""/>
                </xf:instance>

                <!-- State instance -->
                <xf:instance id="fr-state-instance">
                    <state xmlns="">
                        <!-- Whether errors are shown incrementally or not -->
                        <incremental>true</incremental>
                        <!-- Absolute ids of observers -->
                        <observer/>
                        <!-- Whether the form is valid or invalid -->
                        <valid>true</valid>
                        <!-- Number of errors -->
                        <errors-count/>
                        <!-- Number of visible errors -->
                        <visible-errors-count/>
                    </state>
                </xf:instance>

                <!-- Errors for controls that have been visited -->
                <xf:var name="visible-errors" as="element(error)*"
                    value="for $e in instance(if (instance('fr-state-instance')/incremental != 'false') then 'fr-errors-instance' else 'fr-snapshot-instance')/error[normalize-space(@alert)]
                           return
                             if (xxf:visited(xformsUtils:effectiveIdToAbsoluteId(
                                    string-join(
                                        ($e/@id, if (normalize-space($e/@indexes)) then string-join($e/@indexes, '-') else ()), 'Â·'
                                    ))))
                               then $e
                               else ()"/>

                <xf:bind ref="instance('fr-state-instance')">
                    <!-- Current number of errors -->
                    <xf:bind ref="errors-count" calculate="count(instance('fr-errors-instance')/error)"/>
                    <!-- Current number of visible errors -->
                    <xf:bind ref="visible-errors-count" calculate="count($visible-errors)"/>
                </xf:bind>

                <!-- Reusable method to insert an error in the right place in the summary -->
                <xf:action ev:event="fr-insert-error">
                    <!-- Useful stuff passed to us -->
                    <xf:var name="prefixed-id" value="event('prefixed-id')" as="xs:string"/>
                    <xf:var name="control-position" value="event('control-position')" as="xs:integer"/>
                    <xf:var name="repeat-indexes" value="event('repeat-indexes')" as="xs:string*"/>
                    <xf:var name="repeat-ancestors" value="event('repeat-ancestors')" as="xs:string*"/>
                    <xf:var name="alert" value="event('alert')" as="xs:string"/>
                    <xf:var name="label" value="event('label')" as="xs:string"/>
                    <xf:var name="invalid-binds" value="event('invalid-binds')" as="xs:string"/>

                    <!-- Debug -->
                    <!--
                    <xf:message level="xxf:log-debug">
Inserting error information into error list:

    prefixed-id: <xf:output value="$prefixed-id"/>
    control-position:   <xf:output value="$control-position"/>
    repeat-indexes:     <xf:output value="string-join($repeat-indexes, ' ')"/>
    repeat-ancestors:   <xf:output value="string-join($repeat-ancestors, ' ')"/>
    alert:              <xf:output value="$alert"/>
    label:              <xf:output value="$label"/>
    invalid-binds:      <xf:output value="$invalid-binds"/>
                    </xf:message>
                    -->

                    <xf:var name="repeat-indexes-i" value="for $v in $repeat-indexes return xs:integer($v)" as="xs:integer*"/>

                    <!-- Here we compare the incoming error's position to existing error's positions by creating a
                         comparison string for both sides -->
                    <xf:var name="insert-position"
                        value="count(error[
                            string-join(for $v in (subsequence((for $t in tokenize(@indexes, '\s+') return xs:integer($t), 0, 0, 0, 0, 0, 0), 1, min((count($repeat-indexes-i), count(tokenize(@indexes, '\s+'))))), xs:integer(@position))
                                        return format-number($v, '000000'), '-')
                         lt string-join(for $v in (subsequence(($repeat-indexes-i, 0, 0, 0, 0, 0, 0), 1, min((count($repeat-indexes-i), count(tokenize(@indexes, '\s+'))))), $control-position)
                                        return format-number($v, '000000'), '-')])"/>

                    <!-- Now that we have found the position, simply insert -->
                    <xf:insert context="." ref="error[$insert-position]" origin="instance('fr-error-template')"/>
                    <!-- Set all the attributes -->
                    <xf:action context="error[$insert-position + 1]">
                        <xf:setvalue ref="@id" value="$prefixed-id"/>
                        <xf:setvalue ref="@position" value="$control-position"/>
                        <xf:setvalue ref="@indexes" value="string-join($repeat-indexes, ' ')"/>
                        <xf:setvalue ref="@repeats" value="string-join($repeat-ancestors, ' ')"/>
                        <xf:setvalue ref="@alert" value="$alert"/>
                        <xf:setvalue ref="@label" value="$label"/>
                        <xf:setvalue ref="@binds" value="$invalid-binds"/>
                    </xf:action>

                </xf:action>

            </xf:model>
        </xbl:implementation>
        <xbl:template xxbl:transform="oxf:unsafe-xslt" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:oxf="http://www.orbeon.com/oxf/processors">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy.xsl"/>
                <xsl:import href="oxf:/oxf/xslt/utils/xbl.xsl"/>

                <xsl:template match="/*">
                    <!-- Outer group around outer event handlers -->
                    <xf:group appearance="xxf:internal" xxbl:scope="outer">

                        <!-- When the group becomes relevant, remember incremental flag -->
                        <!-- NOTE:
                            * upon initial refresh, xforms-enabled is dispatched here
                            * iteration over $visible-errors in view has already taken place, but over empty list of errors
                            * then correct incremental flag is set
                            * initial errors might have been inserted already or not, depending on where error summary is on page
                            * but in any case, this means a second refresh has to take place
                            -->
                        <xf:setvalue
                            ev:event="xforms-enabled"
                            xxbl:scope="inner"
                            ref="instance('fr-state-instance')/incremental"
                            xbl:attr="xbl:text=incremental"/>

                        <!-- When the group becomes relevant, remember the observers (used by fr-(un)visit-all) -->
                        <xf:var name="observer" xbl:attr="xbl:text=observer"/>

                        <xf:var name="observers" xxbl:scope="inner">
                            <xxf:sequence value="for $o in tokenize($observer, '\s+') return xxf:absolute-id($o)" xxbl:scope="outer"/>

                            <xf:setvalue
                                ev:event="xforms-enabled"
                                ref="instance('fr-state-instance')/observer"
                                value="string-join($observers, ' ')"/>

                        </xf:var>

                        <!-- Make sure the model is recalculated when there is a chance visited controls might have
                             changed. We do this because there is no dependency handling with the xxf:visited()
                             function. -->
                        <xf:action xbl:attr="ev:observer=observer" ev:event="DOMFocusOut" xxf:phantom="true">
                            <xf:recalculate xxbl:scope="inner"/>
                        </xf:action>

                        <!-- Control becomes invalid or its value is updated -->
                        <xf:action xbl:attr="ev:observer=observer" ev:event="xforms-invalid xforms-value-changed" xxf:phantom="true">

                            <xf:action xxbl:scope="inner">

                                <!-- Useful stuff passed to us -->
                                <xf:var name="prefixed-id" value="string-join((event('xxf:target-prefixes'), event('xxf:targetid')), '$')" as="xs:string"/>
                                <xf:var name="repeat-indexes" value="event('xxf:repeat-indexes')" as="xs:string*"/>
                                <xf:var name="repeat-ancestors" value="event('xxf:repeat-ancestors')" as="xs:string*"/>

                                <!-- Try to find existing error element -->
                                <xf:var name="current-error" value="error[@id = $prefixed-id and @indexes = string-join($repeat-indexes, ' ')]" as="element(error)*"/>
                                <!-- Just update the label, alert and bind info if it already exists -->
                                <xf:action if="exists($current-error)" context="$current-error">
                                    <xf:setvalue ref="$current-error/@alert" value="event('xxf:alert')"/>
                                    <xf:setvalue ref="$current-error/@label" value="event('xxf:label')"/>
                                    <xf:setvalue ref="$current-error/@binds" value="string-join(xxf:invalid-binds(event('xxf:binding')), ' ')"/>
                                </xf:action>
                                <!-- Otherwise if the event is xforms-invalid, insert new element and sets its values -->
                                <xf:action if="event('xxf:type') = 'xforms-invalid' and not(exists($current-error))">
                                    <!-- Remember that the instance is no longer valid -->
                                    <xf:setvalue ref="instance('fr-state-instance')/valid">false</xf:setvalue>

                                    <!-- Insert error -->
                                    <xf:dispatch name="fr-insert-error" targetid="fr-error-summary-model">
                                        <xxf:context name="prefixed-id" value="$prefixed-id"/>
                                        <xxf:context name="control-position" value="event('xxf:control-position')"/>
                                        <xxf:context name="repeat-indexes" value="$repeat-indexes"/>
                                        <xxf:context name="repeat-ancestors" value="event('xxf:repeat-ancestors')"/>
                                        <xxf:context name="alert" value="event('xxf:alert')"/>
                                        <xxf:context name="label" value="event('xxf:label')"/>
                                        <xxf:context name="invalid-binds" value="string-join(xxf:invalid-binds(event('xxf:binding')), ' ')"/>
                                    </xf:dispatch>

                                </xf:action>
                            </xf:action>
                        </xf:action>

                        <!-- Control becomes valid or is removed -->
                        <xf:action xbl:attr="ev:observer=observer" ev:event="xforms-valid xforms-disabled" xxf:phantom="true">

                            <xf:action xxbl:scope="inner">

                                <!-- Useful stuff passed to us -->
                                <xf:var name="prefixed-id" value="string-join((event('xxf:target-prefixes'), event('xxf:targetid')), '$')" as="xs:string"/>
                                <xf:var name="repeat-indexes" value="event('xxf:repeat-indexes')" as="xs:string*"/>

                                <!-- See if there is a matching error -->
                                <xf:var name="current-error" value="error[@id = $prefixed-id and @indexes = string-join($repeat-indexes, ' ')]" as="element(error)*"/>
                                <xf:action if="exists($current-error)">
                                    <!-- Mark sub-form as valid if there are no more errors -->
                                    <xf:action if="1 >= count(error)">
                                        <xf:setvalue ref="instance('fr-state-instance')/valid">true</xf:setvalue>
                                    </xf:action>
                                    <!-- Remove error -->
                                    <xf:delete ref="$current-error"/>
                                </xf:action>
                            </xf:action>
                        </xf:action>

                        <!-- Node-set changed -->
                        <xf:action xbl:attr="ev:observer=observer" ev:event="xxforms-nodeset-changed" xxf:phantom="true"
                                       if="count(event('xxf:to-positions')) > 0">
                            <xf:action xxbl:scope="inner">
                                <!-- One or more iterations have moved. This is a bit tricky: we must update the error summary properly. -->

                                <!-- Useful stuff passed to us -->
                                <xf:var name="prefixed-id" value="string-join((event('xxf:target-prefixes'), event('xxf:targetid')), '$')" as="xs:string"/>
                                <!-- These represent the repeat hierarchy of this current repeat target -->
                                <xf:var name="repeat-indexes" value="event('xxf:repeat-indexes')" as="xs:string*"/>
                                <xf:var name="repeat-ancestors" value="event('xxf:repeat-ancestors')" as="xs:string*"/>
                                <!-- These are the old positions of the iterations that moved on this current repeat target -->
                                <xf:var name="from-positions" value="event('xxf:from-positions')" as="xs:integer*"/>
                                <!-- These are the new positions of the iterations that moved on this current repeat target -->
                                <xf:var name="to-positions" value="event('xxf:to-positions')" as="xs:integer*"/>

                                <xf:var name="prefix-size" value="count($repeat-ancestors) + 1" as="xs:integer"/>
                                <xf:var name="repeats-prefix" value="($repeat-ancestors, event('xxf:targetid'))" as="xs:string*"/>
                                <xf:var name="repeats-string" value="string-join($repeats-prefix, ' ')" as="xs:string*"/>

                                <xf:var name="indexes-strings" as="xs:string*"
                                                  value="for $p in $from-positions
                                                          return string-join(($repeat-indexes, xs:string($p)), ' ')" />

                                <!-- Find affected errors, i.e. all controls that descend from any moved iteration -->
                                <xf:var name="affected-errors" as="element(error)*"
                                                  value="error[string-join(subsequence(tokenize(@repeats, '\s+'), 1, $prefix-size), ' ') = $repeats-string
                                                            and string-join(subsequence(tokenize(@indexes, '\s+'), 1, $prefix-size), ' ') = $indexes-strings]"/>


                                <!-- A full prefix looks like: "company-repeatÂ·3/employee-repeatÂ·2" -->
                                <xf:var name="full-prefixes" as="xs:string*"
                                                  value="for $p in $from-positions
                                                            return string-join((for $r in $repeat-ancestors
                                                              return concat($r, 'Â·', $repeat-indexes[index-of($repeat-ancestors, $r)]), concat($prefixed-id, 'Â·', $p)), '/')"/>

                                <!-- Replace visited control full ids -->
                                <xf:var name="updated-visited" as="xs:string*"
                                                  value="for $v in tokenize(instance('fr-visited-instance'), '\s+')
                                                            return for $full-prefix in string-join(subsequence(tokenize($v, '/'), 1, $prefix-size), '/')
                                                              return if ($full-prefixes = $full-prefix)
                                                                then string-join(
                                                                      (concat(
                                                                          string-join(tokenize($full-prefix, 'Â·')[position() lt last()], 'Â·'),
                                                                          'Â·',
                                                                          $to-positions[index-of($from-positions, xs:integer(tokenize($full-prefix, 'Â·')[last()]))[1]],
                                                                          substring($v, string-length($full-prefix) + 1))), '/')
                                                                else $v
                                                            "/>
                                <xf:setvalue ref="instance('fr-visited-instance')" value="string-join($updated-visited, ' ')"/>

                                <!-- Remove affected errors from instance -->
                                <xf:delete ref="$affected-errors"/>

                                <!-- Re-insert affected errors -->
                                <xf:action iterate="$affected-errors">
                                    <xf:var name="error" value="." as="element(error)"/>
                                    <xf:var name="current-indexes" value="tokenize($error/@indexes, '\s+')" as="xs:string*"/>
                                    <xf:var name="from-position" value="$current-indexes[$prefix-size]" as="xs:string"/>
                                    <xf:var name="to-position" value="$to-positions[index-of($from-positions, xs:integer($from-position))[1]]" as="xs:integer"/>

                                    <xf:dispatch name="fr-insert-error" targetid="fr-error-summary-model">
                                        <!-- Unchanged -->
                                        <xxf:context name="prefixed-id" value="$error/@id"/>
                                        <xxf:context name="control-position" value="$error/@position"/>
                                        <!-- Replace old iteration by new iteration and keep the rest the same -->
                                        <xxf:context name="repeat-indexes"
                                                         value="($repeat-indexes, xs:string($to-position), subsequence($current-indexes, $prefix-size + 1))"/>
                                        <!-- Unchanged -->
                                        <xxf:context name="repeat-ancestors" value="$error/@repeats"/>
                                        <xxf:context name="alert" value="$error/@alert"/>
                                        <xxf:context name="label" value="$error/@label"/>
                                        <xxf:context name="invalid-binds" value="$error/@invalid-binds"/>
                                    </xf:dispatch>
                                </xf:action>

                            </xf:action>
                        </xf:action>

                        <!-- Write out the error count -->
                        <xf:group ref="()" xbl:attr="model context ref=errors-count-ref" appearance="xxf:internal">
                            <xf:group ref="instance('fr-state-instance')/errors-count" xxbl:scope="inner" appearance="xxf:internal">
                                <xf:var name="ref" as="item()?">
                                    <xxf:sequence value="." xxbl:scope="outer"/>
                                </xf:var>
                                <xf:var name="errors-count" as="xs:integer" value="xs:integer(.)">
                                    <xf:setvalue ev:event="xforms-enabled xforms-value-changed" ref="$ref" value="$errors-count"/>
                                </xf:var>
                            </xf:group>
                        </xf:group>

                        <!-- Write out the visible error count -->
                        <xf:group ref="()" xbl:attr="model context ref=visible-errors-count-ref" appearance="xxf:internal">
                            <xf:group ref="instance('fr-state-instance')/visible-errors-count" xxbl:scope="inner" appearance="xxf:internal">
                                <xf:var name="ref" as="item()?">
                                    <xxf:sequence value="." xxbl:scope="outer"/>
                                </xf:var>
                                <xf:var name="visible-errors-count" as="xs:integer" value="xs:integer(.)">
                                    <xf:setvalue ev:event="xforms-enabled xforms-value-changed" ref="$ref" value="$visible-errors-count"/>
                                </xf:var>
                            </xf:group>
                        </xf:group>

                        <!-- Write out the validity -->
                        <xf:group ref="()" xbl:attr="model context ref=valid-ref" appearance="xxf:internal">
                            <xf:group ref="instance('fr-state-instance')/valid" xxbl:scope="inner" appearance="xxf:internal">
                                <xf:var name="ref" as="item()?">
                                    <xxf:sequence value="." xxbl:scope="outer"/>
                                </xf:var>
                                <xf:var name="valid" as="xs:boolean" value="xs:boolean(.)">
                                    <xf:setvalue ev:event="xforms-enabled xforms-value-changed" ref="$ref" value="$valid"/>
                                </xf:var>
                            </xf:group>
                        </xf:group>

                        <!-- Count global errors -->
                        <xsl:variable name="fr-errors" select="/*/fr:errors" as="element(fr:errors)*"/>
                        <xsl:if test="exists($fr-errors)">
                            <xf:var name="global-errors" xxbl:scope="inner">
                                <xxf:sequence value="({string-join($fr-errors/@ref, ',')})" xxbl:scope="outer">
                                    <xsl:copy-of select="$fr-errors/ancestor-or-self::*/namespace::*"/>
                                </xxf:sequence>
                            </xf:var>
                        </xsl:if>

                        <!-- Only show this section if there are any visible errors -->
                        <xf:group ref=".[exists($visible-errors){if (exists($fr-errors)) then ' or exists($global-errors)' else ''}]" xxbl:scope="inner" id="ig">

                            <!-- Include optional header -->
                            <xbl:content includes=":root > fr|header > *"/>

                            <!-- Body of the error summary -->
                            <xf:group class="fr-error-summary-body" id="body" appearance="xxf:fieldset">
                                <!-- Include optional fr:label into xf:label -->
                                <xsl:for-each select="/*/fr:label[1]">
                                    <xf:label xxbl:scope="outer" class="fr-error-title">
                                        <xsl:copy-of select="@*|node()"/>
                                    </xf:label>
                                </xsl:for-each>
                                <!-- Anchor for navigation -->
                                <xh:a name="fr-errors"/>
                                <xh:ol class="fr-error-list">

                                    <!-- Display global errors -->
                                    <xsl:for-each select="$fr-errors">
                                        <xf:repeat ref="{@ref, @nodeset}" xxbl:scope="outer" xmlns:v="http://www.example.com/validation">
                                            <xsl:copy-of select="ancestor-or-self::*/namespace::*"/>
                                            <xh:li>
                                                <!-- Clickable / linkable label -->
                                                <xsl:if test="exists(fr:label)">
                                                    <xf:output class="fr-error-label">
                                                        <xsl:copy-of select="fr:label/(@*|node())"/>
                                                    </xf:output>
                                                    <xsl:text> - </xsl:text>
                                                </xsl:if>
                                                <!-- Alert message -->
                                                <xsl:if test="exists(fr:alert)">
                                                    <xf:output class="fr-error-alert">
                                                        <xsl:copy-of select="fr:alert/(@*|node())"/>
                                                    </xf:output>
                                                </xsl:if>
                                            </xh:li>
                                        </xf:repeat>
                                    </xsl:for-each>

                                    <!-- Display control errors -->
                                    <xf:repeat ref="$visible-errors" id="er">
                                        <xh:li>
                                            <!-- Clickable / linkable label -->
                                            <xf:var name="error" value="."/>
                                            <xf:var name="has-label" value="not(normalize-space(@label) = '')"/>
                                            <xf:var name="effective-id"
                                                    value="string-join(($error/@id, if (normalize-space($error/@indexes)) then string-join(tokenize($error/@indexes, '\s+'), '-') else ()), 'Â·')"/>

                                            <xf:group ref=".[$has-label and property('xxf:noscript')]">
                                                <!-- In noscript mode, use a plain link to the effective id -->
                                                 <xh:a href="#{{$effective-id}}"><xf:output value="$error/@label" class="fr-error-label"/></xh:a>
                                            </xf:group>
                                            <!-- Otherwise use trigger -->
                                            <!-- Make sure variable is in outer scope so that id resolution works if id is a top-level id -->
                                            <xf:var name="effective-id-outer" as="xs:string" xxbl:scope="outer">
                                                <xxf:sequence value="$effective-id" xxbl:scope="inner"/>
                                            </xf:var>
                                            <xf:trigger ref=".[$has-label and not(property('xxf:noscript'))]" appearance="minimal" class="fr-error-label">
                                                <xf:label value="normalize-space($error/@label)"/>
                                                <!-- Set focus to control using absolute id -->
                                                <xf:setfocus ev:event="DOMActivate" control="{{xformsUtils:effectiveIdToAbsoluteId($effective-id-outer)}}" xxbl:scope="outer"/>
                                            </xf:trigger>
                                            <!-- Repeat indexes -->
                                            <xf:output ref=".[string-length(@indexes) > 0]" class="fr-error-row"
                                                           value="concat(' [', @indexes, ']')" id="io"/>
                                            <!-- Separator -->
                                            <xf:output ref=".[$has-label]" value="' - '" class="fr-error-dash"/>
                                            <!-- Alert message -->
                                            <xf:output ref=".[normalize-space(@alert) != '']" class="fr-error-alert"
                                                           value="@alert" id="ao"/>
                                        </xh:li>
                                    </xf:repeat>
                                </xh:ol>
                            </xf:group>

                            <!-- Include optional footer -->
                            <xbl:content includes=":root > fr|footer > *"/>

                        </xf:group>
                    </xf:group>
                </xsl:template>
            </xsl:transform>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>
