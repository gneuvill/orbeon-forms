<!--
  Copyright (C) 2012 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xf:model id="fr-persistence-model"
              xmlns:xs="http://www.w3.org/2001/XMLSchema"
              xmlns:xf="http://www.w3.org/2002/xforms"
              xmlns:ev="http://www.w3.org/2001/xml-events"
              xmlns:exf="http://www.exforms.org/exf/1-0"
              xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
              xmlns:xi="http://www.w3.org/2001/XInclude"
              xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
              xmlns:f="http://orbeon.org/oxf/xml/formatting"
              xmlns:saxon="http://saxon.sf.net/"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
              xmlns:formRunner="java:org.orbeon.oxf.fr.FormRunner"
              xmlns:secure="java:org.orbeon.oxf.util.SecureUtils"
              xmlns:xpl="java:org.orbeon.oxf.pipeline.api.FunctionLibrary">

    <xf:var name="parameters" value="xxf:instance('fr-parameters-instance')" as="element()"/>
    <xf:var name="app" value="$parameters/app" as="xs:string"/>
    <xf:var name="form" value="$parameters/form" as="xs:string"/>
    <xf:var name="document" value="$parameters/document"/>
    <xf:var name="mode" value="$parameters/mode"/>
    
    <xf:var name="persistence-instance" value="instance('fr-persistence-instance')"/>

    <!-- Model initialization when we have a specific app and form -->
    <!-- TODO: Should not do this on summary page, for example -->
    <xf:action ev:event="xforms-model-construct-done" if="$app != '*' and $form != '*'">

        <!-- Initialize parameters to pass to "new" service -->
        <xf:var name="pass-request-parameters" value="xxf:property(string-join(('oxf.fr.detail.new.service.passing-request-parameters', $app, $form), '.'))"/>
        <xf:action iterate="tokenize($pass-request-parameters, '\s+')">
            <xf:var name="parameter-name" value="."/>
            <xf:var name="parameter-value" value="xxf:get-request-parameter($parameter-name)"/>
            <xf:insert context="instance('fr-service-parameters')" origin="xxf:element($parameter-name, $parameter-value)"/>
        </xf:action>

        <!-- Compute authorized operations -->
        <xf:var name="metadata" value="xxf:instance('fr-form-metadata')"/>
        <xf:setvalue
            ref="instance('fr-authorized-operations')"
            value="string-join(formRunner:authorizedOperationsOnForm($metadata/permissions), ' ')"/>
        <!-- If user can't perform the required operations, deny access to this page -->
        <xf:var name="mode" value="xxf:instance('fr-parameters-instance')/mode treat as element()"/>
        <xf:var name="operations" value="tokenize(instance('fr-authorized-operations'), '\s')"/>
        <xf:var name="unauthorized-access" value="
            ($mode = 'summary'         and not($operations = ('*', 'read', 'update', 'delete'))) or
            ($mode = ('new', 'import') and not($operations = ('*', 'create'))) or
            ($mode = 'edit'            and not($operations = ('*', 'update'))) or
            ($mode = ('view', 'pdf')   and not($operations = ('*', 'read')))"/>

        <!-- Send an "Unauthorized" error if the user is unauthorized -->
        <xf:action if="$unauthorized-access" type="xpath">
            formRunner:sendError(401)
        </xf:action>

        <!-- Handle loading of initial data for new/edit/view/pdf/email modes only -->
        <xf:action if="$mode = ('new', 'edit', 'view', 'pdf', 'email')">

            <xf:var name="is-new-id" value="normalize-space($document) = ''"/>
            <xf:var name="is-xml-submit" value="exists(xxf:get-request-attribute('fr-form-data'))"/>
            <xf:var name="is-submit" value="$is-xml-submit or exists(xxf:get-request-parameter('fr-form-data'))"/>

            <!-- Create random document id if none is provided. This is the default for 'new', but a missing id is also
                 allowed for 'edit', 'view', etc., when data is posted to the page. -->
            <xf:setvalue if="$is-new-id" ref="$document" value="secure:randomHexId()"/>

            <!-- Case of 'new' mode where we load the initial data via a service -->
            <xf:var name="new-from-service" value="$mode = 'new' and xxf:property(string-join(('oxf.fr.detail.new.service.enable', $app, $form), '.'))"/>
            <xf:action if="$new-from-service">
                <xf:message level="xxf:log-debug">Loading new data from service</xf:message>
                <xf:send submission="fr-get-instance-from-service"/>
            </xf:action>

            <!-- Keep initial data for clear button. We can argue if we would like instead to keep data submitted to
                /new below. Would that break in case of switching modes (script/noscript)? Here seems to be a good start. -->
            <xf:insert ref="instance('fr-initial-instance')" origin="xxf:instance('fr-form-instance')"/>

            <!-- Check the data submitted to the page.

                 - 'new' mode:  check if we accept submitted data based on a property
                 - 'edit' mode: check based on a property, but let plain XML POSTs pass as that's used internally to switch modes
                 - 'view' mode: accept XML POSTs

                 In the future, we should enforce other cases by making sure that the data comes from Form Runner itself. -->
            <xf:var name="pass-submit-check"
                              value="$mode = 'new'                    and xxf:property(string-join(('oxf.fr.detail.new.accept-post', $app, $form), '.'))
                                   or $mode = 'edit'                   and ($is-xml-submit or xxf:property(string-join(('oxf.fr.detail.edit.accept-post', $app, $form), '.')))
                                   or $mode = ('view', 'pdf', 'email') and $is-xml-submit"/>

            <!-- Case of data submitted to the page -->
            <xf:action if="$is-submit and $pass-submit-check">

                <!-- Do we have data posted to this form as a parameter? -->
                <xf:action if="not($is-xml-submit)">
                    <xf:var name="form-data" value="xxf:get-request-parameter('fr-form-data')"/>
                    <xf:action if="$form-data">
                        <xf:message level="xxf:log-debug">Loading data submitted to the page as parameter</xf:message>
                        <xf:var name="xml-data" value="saxon:parse(saxon:base64Binary-to-string(xs:base64Binary($form-data), 'UTF-8'))"/>
                        <xf:insert nodeset="xxf:instance('fr-form-instance')" origin="$xml-data"/>
                    </xf:action>
                </xf:action>

                <!-- Do we have data posted to this form as XML? -->
                <xf:action if="$is-xml-submit">
                    <xf:message level="xxf:log-debug">Loading data submitted to the page as XML</xf:message>
                    <xf:var name="form-data" value="xxf:get-request-attribute('fr-form-data')" as="document-node()?"/>
                    <xf:insert nodeset="xxf:instance('fr-form-instance')" origin="$form-data"/>
                </xf:action>

                <!-- Set initial data as dirty, because this is the case typically of switching between script/noscript
                     mode, and we can't really know if the data is clean or dirty but would like to enable the save button -->
                <xf:setvalue if="$mode = 'edit'" ref="$persistence-instance/initial-data-status">dirty</xf:setvalue>
            </xf:action>

            <!-- In 'new' mode only, after an external document has been set, recalculate defaults (and rebuild so the refs
                 in the binds are updated). -->
            <xf:action if="$new-from-service or ($mode = 'new' and $is-submit)">
                <!-- After we get the document from the persistence layer, recalculate defaults (and rebuild so the refs in the binds are updated) -->
                <xf:message level="xxf:log-debug">Updating initial values for externally-loaded new document</xf:message>
                <xf:rebuild model="fr-form-model"/>
                <xf:recalculate xxf:defaults="true" model="fr-form-model"/>
            </xf:action>

            <!-- Case of modes other than new where the data to be edited or viewed is loaded from the persistence layer -->
            <xf:action if="$mode != 'new' and not($is-new-id) and not($is-submit)">
                <!-- Load document with the provided id from persistence layer -->
                <xf:message level="xxf:log-debug">Loading data by id from persistence layer: <xf:output value="$document"/></xf:message>
                <xf:send submission="fr-get-document-submission"/>
            </xf:action>

            <xf:message level="xxf:log-debug">
                $is-submit: <xf:output value="$is-submit"/>
                $pass-submit-check: <xf:output value="$pass-submit-check"/>
                $mode: <xf:output value="$mode"/>
                $is-new-id: <xf:output value="$is-new-id"/>
            </xf:message>

            <!-- Don't allow if the constraints are not satisfied:

                 - either we got a submit and passed
                 - or we didn't get a submit, in which case we check that we have the proper id depending on the mode

                 NOTE: 403 applies well to the first condition. For the second condition, a 404 could also be possible.
             -->
            <xf:action if="($is-submit and not($pass-submit-check)) or (not($is-submit) and not($is-new-id and $mode = 'new' or $mode != 'new'))" type="xpath">
                formRunner:sendError(403)
            </xf:action>
        </xf:action>

        <!-- Notify that the data is ready -->
        <xf:dispatch targetid="fr-form-model" name="fr-data-ready"/>

    </xf:action>

    <xf:action ev:event="xforms-ready">
        <!-- Force all this so we can safely set the data status -->
        <xf:rebuild/>
        <xf:recalculate/>
        <xf:revalidate/>
        <xf:refresh/>
        <!-- Set the initial data status -->
        <xf:setvalue ref="$persistence-instance/data-status" value="../initial-data-status"/>
    </xf:action>

    <!-- Clear operation -->
    <xf:action ev:event="fr-clear">
        <!-- Case of inline template -->
        <xf:insert nodeset="xxf:instance('fr-form-instance')" origin="instance('fr-initial-instance')"/>

        <!-- Notify that the data is reset -->
        <xf:dispatch targetid="fr-form-model" name="fr-data-reset"/>

        <!-- Perform refresh (above sets RRR flags already) so that after that we can clear error summary -->
        <xf:refresh/>

        <!-- Clear error summary -->
        <xf:dispatch name="fr-unvisit-all" targetid="fr-error-summary-model"/>
    </xf:action>

    <!-- New document operation -->
    <xf:setvalue ev:event="fr-new-document" ref="$document" value="secure:randomHexId()"/>

    <!-- Delete operation -->
    <xf:action ev:event="fr-delete-data">
        <xf:send submission="fr-delete-document-submission">
            <xxf:context name="document-id" value="event('document-id')"/>
        </xf:send>
    </xf:action>

    <xf:submission id="fr-delete-document-submission"
            method="delete" serialization="none"
            resource="/fr/service/persistence/crud/{$app}/{$form}/data/{event('document-id')}/data.xml"
            replace="none"/>

    <!-- Respond to save button activation -->
    <xf:action ev:event="DOMActivate" ev:observer="fr-save-button">
        <xf:setvalue ref="$persistence-instance/submit-or-save-or-send">save</xf:setvalue>
        <xf:dispatch name="fr-save-action" target="fr-persistence-model">
            <!-- Check validity based on property -->
            <xxf:context
                name="fr:check-data-valid"
                value="xxf:property(string-join(('oxf.fr.detail.save.validate', $app, $form), '.'))"/>
        </xf:dispatch>
    </xf:action>

    <!-- Respond to submit button activation -->
    <xf:action ev:event="DOMActivate" ev:observer="fr-submit-button">
        <xf:setvalue ref="$persistence-instance/submit-or-save-or-send">submit</xf:setvalue>
        <xf:dispatch name="fr-save-action" target="fr-persistence-model">
            <xxf:context name="fr:check-data-valid" value="true()"/>
        </xf:dispatch>
    </xf:action>

    <!-- Respond to workflow preview button activation -->
    <xf:action ev:event="DOMActivate" ev:observer="fr-workflow-review-button">

        <xf:var name="validity-passed" value="xxf:instance('fr-error-summary-instance')/valid = 'true'"/>

        <!-- Show error if validation did not pass -->
        <xf:action if="not($validity-passed)">
            <xf:dispatch name="fr-persistence-error" targetid="fr-persistence-model">
                <xxf:context name="error-type">validation-error</xxf:context>
            </xf:dispatch>
        </xf:action>

        <!-- Show error if there is at least one upload in progress -->
        <xf:action if="$validity-passed and xxf:pending-uploads() > 0">
            <xf:dispatch name="fr-persistence-error" targetid="fr-persistence-model">
                <xxf:context name="error-type">xxforms-pending-uploads</xxf:context>
            </xf:dispatch>
        </xf:action>

        <!-- Send -->
        <xf:send if="$validity-passed and not(xxf:pending-uploads() > 0)" submission="fr-workflow-review-submission"/>

    </xf:action>

    <!-- Respond to workflow edit button activation -->
    <xf:action ev:event="DOMActivate" ev:observer="fr-workflow-edit-button">
        <!-- Just send the submission -->
        <xf:send submission="fr-workflow-edit-submission"/>
    </xf:action>

    <!-- Respond to send button activation -->
    <xf:action ev:event="DOMActivate" ev:observer="fr-workflow-send-button">
        <xf:setvalue ref="$persistence-instance/submit-or-save-or-send">send</xf:setvalue>
        <xf:dispatch name="fr-save-action" target="fr-persistence-model">
            <xxf:context name="fr:check-data-valid" value="true()"/>
        </xf:dispatch>
    </xf:action>

    <xf:action ev:event="fr-save-action">
        <!-- fr:check-data-valid   xs:boolean   * true if the data needs to be valid to perform this action (generally the
                                                  case this is called in response to users' actions such as click on a
                                                  Save button).
                                                * false if this action should be performed even if the data is invalid
                                                  (e.g. when doing an auto-save). -->
        <xf:var name="check-data-valid" value="event('fr:check-data-valid')"/>

        <xf:setvalue ref="$persistence-instance/is-error">false</xf:setvalue>
        <xf:setvalue ref="$persistence-instance/save-attempted">true</xf:setvalue>
        <xf:action if="$document != ''">

            <!-- Check validity of data before trying to save, because:
                 1) We don't want to save attachments if the form is invalid.
                 2) Submission doesn't check validity anymore. -->
            <!-- We use instance('fr-error-summary-instance')/valid and not xxf:valid() because the instance
                 validity may not be reflected with the use of XBL components. -->

            <xf:var name="validity-passed" value="not($check-data-valid) or (xxf:instance('fr-error-summary-instance')/valid = 'true')" as="xs:boolean"/>

            <!-- Show error if validation did not pass -->
            <xf:action if="not($validity-passed)">
                <xf:dispatch name="fr-persistence-error" targetid="fr-persistence-model">
                    <xxf:context name="error-type">validation-error</xxf:context>
                </xf:dispatch>
            </xf:action>

            <!-- Show error if there is at least one upload in progress -->
            <xf:action if="$validity-passed and xxf:pending-uploads() > 0">
                <xf:dispatch name="fr-persistence-error" targetid="fr-persistence-model">
                    <xxf:context name="error-type">xxforms-pending-uploads</xxf:context>
                </xf:dispatch>
            </xf:action>

            <!-- Actually save if we passed validation and there is no upload in progress -->
            <xf:action if="$validity-passed and not(xxf:pending-uploads() > 0)">
                <!-- Data valid: proceed with saving attachments and data -->

                <!-- Notify that the data is about to be saved -->
                <xf:dispatch targetid="fr-form-model" name="fr-data-save-prepare"/>

                <!-- Find all instance nodes containing upload file URLs -->
                <xf:var name="upload-holders"
                            model="fr-form-model"
                            value="instance('fr-form-instance')/root()//(*[not(*)] | @*)[formRunner:isUploadedFileURL(normalize-space(.))]"/>

                <xf:var name="before-urls"
                            value="$upload-holders/normalize-space()"/>

                <!-- For each one compute the persistence resource name -->
                <xf:var name="after-urls"
                            value="for $holder in $upload-holders return
                                   formRunner:createAttachmentPath($app, $form, $document, normalize-space($holder))"/>
                
                <!--<xf:message level="xxf:log-debug">-->
                    <!--xxx <xf:output value="count($upload-holders)"/>-->
                <!--</xf:message>-->
                
                <xf:action iterate="$upload-holders" if="$persistence-instance/is-error = 'false'">

                    <xf:var name="p" value="position()"/>
                    <xf:var name="holder" value="."/>
                    <xf:var name="uri" value="normalize-space(substring-before($holder, '?'))"/>
                    <xf:var name="resource" value="$after-urls[$p]"/>

                    <!--<xf:message level="xxf:log-debug">-->
                        <!--xxx-->
                        <!--<xf:output value="$upload-extension"/> -->
                        <!--<xf:output value="$upload-has-extension"/> -->
                        <!--<xf:output value="$new-id"/> -->
                        <!--<xf:output value="$new-filename"/> -->
                        <!--<xf:output value="$resource"/>-->
                    <!--</xf:message>-->

                    <!-- Save attachment -->
                    <xf:send submission="fr-create-update-attachment-submission">
                        <xxf:context name="holder" value="$holder"/>
                        <xxf:context name="resource" value="$resource"/>
                    </xf:send>

                    <!-- Update the path -->
                    <xf:setvalue if="$persistence-instance/is-error = 'false'" ref="$holder" value="$resource"/>
                    
                </xf:action>

                <xf:action if="$persistence-instance/is-error = 'false'">

                    <!-- Save XML document -->
                    <xf:send submission="fr-create-update-submission" >
                        <xxf:context name="holder" value="xxf:instance('fr-form-instance')"/>
                        <!-- We always store form data as "data.xml" -->
                        <xxf:context name="resource" value="'data.xml'"/>
                    </xf:send>

                    <!-- If we were in new mode, now we must be in edit mode -->
                    <xf:setvalue if="$persistence-instance/is-error = 'false'" ref="$parameters/mode" value="'edit'"/>
                </xf:action>

                <!-- Notify that the data is saved -->
                <xf:dispatch if="$persistence-instance/is-error = 'false'" targetid="fr-form-model" name="fr-data-save-done">
                    <xxf:context name="before-urls" value="$before-urls"/>
                    <xxf:context name="after-urls" value="$after-urls"/>
                </xf:dispatch>
            </xf:action>
        </xf:action>
    </xf:action>

    <!-- Instance to store the result of the create/update submission -->
    <xf:instance id="fr-create-update-submission-response">
        <response xmlns=""/>
    </xf:instance>

    <!-- Submission to create/update the XML form -->
    <!-- Note about validate="false": In general, when the user saves data, the data needs to be valid. This will be
         enforced by the "Save" button being disabled. But there are other cases where we want to call this persistence
         code and where the data might not be valid. For instance: auto-save, or saving as Draft as soon as a new
         form instance is created. -->
    <xf:submission id="fr-create-update-submission"
            validate="false" relevant="false" method="put"
            ref="event('holder')"
            resource="/fr/service/persistence/crud/{$app}/{$form}/data/{$document}/{event('resource')}"
            replace="text" target="instance('fr-create-update-submission-response')"/>

    <!-- Submission to create/update an attachment -->
    <xf:submission id="fr-create-update-attachment-submission"
            method="put" serialization="application/octet-stream"
            ref="event('holder')"
            resource="{event('resource')}"
            replace="none"/>

    <!-- Get document -->
    <xf:submission id="fr-get-document-submission"
            method="get" serialization="none"
            resource="/fr/service/persistence/crud/{$app}/{$form}/data/{$document}/data.xml"
            replace="instance" xxf:instance="fr-form-instance"/>

    <!-- Initial instance (to support clear) -->
    <xf:instance id="fr-initial-instance" xxf:readonly="false"><!-- Set to false so that xf:insert works -->
        <form xmlns=""/>
    </xf:instance>

    <!-- Which operations the user can perform -->
    <xf:instance id="fr-authorized-operations">
        <operations/>
    </xf:instance>

    <xf:instance id="fr-service-parameters">
        <parameters/>
    </xf:instance>

    <!-- Calls a service to get the initial instance -->
    <xf:submission id="fr-get-instance-from-service"
            method="get" separator="&amp;" ref="instance('fr-service-parameters')"
            resource="xxf:property(string-join(('oxf.fr.detail.new.service.uri', $app, $form), '.'))"
            replace="instance" xxf:instance="fr-form-instance"/>

    <xf:instance id="fr-persistence-instance">
        <save xmlns="">
            <!-- Initial data status -->
            <initial-data-status>clean</initial-data-status>
            <!-- Whether form data is clean or dirty (i.e. saved or not saved) -->
            <data-status>clean</data-status>
            <!-- Whether an attempt to submit was ever done -->
            <save-attempted>false</save-attempted>
            <!-- Success or error message to display -->
            <message/>
            <!-- Error document returned -->
            <error/>
            <!-- Whether an error was received -->
            <is-error>false</is-error>
            <!-- Whether the last action that triggered the fr-create-update-submission is a "submit" or a "save" -->
            <submit-or-save-or-send/>
            <!-- Flag to override data-safe -->
            <data-safe-override/>
            <!-- Whether data is safe -->
            <data-safe/>
            <!-- Is the captcha valid: start with false, will set it to true when valid -->
            <captcha>false</captcha>
        </save>
    </xf:instance>

    <xf:bind nodeset="$persistence-instance">
        <xf:bind nodeset="data-safe" calculate="../data-status = 'clean' or ../data-safe-override = 'true'"/>
        <xf:bind nodeset="captcha" constraint=". = 'true'"/>
    </xf:bind>

    <!-- Configuration for Saxon serialization -->
    <xf:instance id="fr-xsl-output-instance">
        <xsl:output xmlns:xsl="http://www.w3.org/1999/XSL/Transform" method="xml" omit-xml-declaration="yes" indent="yes" saxon:indent-spaces="4"/>
    </xf:instance>

    <xf:instance id="fr-triggers-instance">
        <triggers xmlns="">
            <!-- Regular save/submit -->
            <save/>
            <submit/>
            <!-- These versions are disabled when possible -->
            <strict-save/>
            <strict-submit/>
            <!-- Form Builder stuff, should not be here! -->
            <publish/>
            <!-- Workflow buttons -->
            <workflow-review/>
            <workflow-edit/>
            <workflow-send/>
            <!-- Discard button -->
            <discard/>
            <!-- Other buttons (bind here to make sure they are not read-only) -->
            <other/>
        </triggers>
    </xf:instance>

    <xf:bind nodeset="instance('fr-triggers-instance')">
        <!--
            NOTE: Don't disable basic save/submit buttons so that user can always press it. This arguably yields a
            better experience in non-incremental mode and also allows user to force showing errors.
        -->

        <!-- Condition for disabling strict Save button -->
        <xf:bind nodeset="strict-save" readonly="not(property('xxf:noscript'))
            and ($persistence-instance/data-status = 'clean' or xxf:instance('fr-error-summary-instance')/valid = 'false' or xxf:pending-uploads() > 0)"/>
        <!-- Condition for disabling strict Submit button -->
        <xf:bind nodeset="strict-submit" readonly="not(property('xxf:noscript'))
            and (xxf:instance('fr-error-summary-instance')/valid = 'false' or xxf:pending-uploads() > 0)"/>

        <!-- Condition for disabling Publish button -->
        <xf:bind nodeset="publish" readonly="not($persistence-instance/data-status = 'clean') or xxf:instance('fr-error-summary-instance')/valid = 'false' or xxf:pending-uploads() > 0"/>

        <!-- Conditions for disabling workflow buttons -->
        <xf:bind nodeset="workflow-review" readonly="exf:readonly(../submit)"/>
        <xf:bind nodeset="workflow-edit" readonly="exf:readonly(../submit)"/>
        <xf:bind nodeset="workflow-send" readonly="exf:readonly(../submit)"/>
    </xf:bind>

    <!-- HACK: dependencies: recalculate this model when there is a change in the instance holding error/validity
         information, so that the above binds are kept in sync. Ideally would need smart dependency system. -->
    <xf:recalculate ev:event="xxforms-value-changed" ev:observer="fr-error-summary-instance"/>

    <!-- React to successful submission when saving/updating -->
    <xf:action ev:event="xforms-submit-done" ev:target="fr-create-update-submission">
        <xf:setvalue ref="$persistence-instance/message"
                         model="fr-resources-model" value="$fr-fr-resources/detail/messages/save-success"/>

        <!-- Show success message -->
        <xf:toggle case="fr-message-success"/>

        <!-- HACK: Force this before cleaning the status because we do a setvalue just before calling the submission -->
        <xf:recalculate/>
        <xf:refresh/>

        <xf:setvalue ref="$persistence-instance/data-status">clean</xf:setvalue>

        <!-- If the document was saved because of a "submit", handle the rest of the submission process in dialog -->
        <xf:action if="$persistence-instance/submit-or-save-or-send = 'submit'">
            <!-- Show the submission result dialog -->
            <xxf:show dialog="fr-submission-result-dialog">
                <xxf:context name="fr:content" value="instance('fr-create-update-submission-response')"/>
            </xxf:show>
        </xf:action>

        <!-- If the document was saved because of a "send", handle the rest of the submission process -->
        <xf:action if="$persistence-instance/submit-or-save-or-send = 'send'">
            <!-- TODO: move this to separate model (fr-send-model or fr-workflow-model) -->

            <xf:var name="is-send-navigate" value="$workflow-success-uri != ''" as="xs:boolean"/>
            <xf:var name="is-send-email" value="xxf:property(string-join(('oxf.fr.detail.send.email', $app, $form), '.'))" as="xs:boolean"/>
            <xf:var name="is-send-alfresco" value="xxf:property(string-join(('oxf.fr.detail.send.alfresco', $app, $form), '.'))" as="xs:boolean"/>

            <xf:message level="xxf:log-debug">Sending form data. Navigate: <xf:output value="$is-send-navigate"/>. Email: <xf:output value="$is-send-email"/>. Alfresco: <xf:output value="$is-send-alfresco"/>.</xf:message>

            <!-- Create PDF if requested -->
            <xf:var name="is-create-pdf"
                              value="($is-send-navigate and xxf:property(string-join(('oxf.fr.detail.send.pdf', $app, $form), '.')))
                                      or ($is-send-email and xxf:property(string-join(('oxf.fr.email.attach-pdf', $app, $form), '.')))
                                      or ($is-send-alfresco and xxf:property(string-join(('oxf.fr.alfresco.send-pdf', $app, $form), '.')))" as="xs:boolean"/>

            <xf:message level="xxf:log-debug">Creating PDF.</xf:message>
            <xf:send if="$is-create-pdf" submission="fr-pdf-service-submission"/>

            <xf:action if="$persistence-instance/is-error = 'false'">
                <!-- Send to Alfresco if requested -->
                <xf:action if="$is-send-alfresco">

                    <!-- Pass metadata with current language, or first language if current language is not found -->
                    <xf:var name="form-titles" value="xxf:instance('fr-form-metadata')/title" as="xs:string"/>
                    <xf:var name="form-descriptions" value="xxf:instance('fr-form-metadata')/description" as="xs:string"/>
                    <xf:var name="form-title" value="($form-titles[@xml:lang = xxf:instance('fr-language-instance')], $form-titles[1])[1]" as="xs:string"/>
                    <xf:var name="form-description" value="($form-descriptions[@xml:lang = xxf:instance('fr-language-instance')], $form-descriptions[1])[1]" as="xs:string"/>

                    <!-- Send PDF data if requested -->
                    <xf:action if="xxf:property(string-join(('oxf.fr.alfresco.send-pdf', $app, $form), '.'))">

                        <xf:message level="xxf:log-debug">Sending PDF to Alfresco...</xf:message>

                        <!-- Get URI of PDF data -->
                        <xf:var name="pdf-uri" value="xpl:rewriteServiceURI(instance('fr-workflow-send-instance'), true())" as="xs:anyURI"/>

                        <!-- Send everything to Alfresco -->
                        <xf:dispatch target="fr-alfresco-model" name="alfresco-send-document">
                            <xxf:context name="fr:name" value="concat($form-title, ' (#', $document, ').pdf')"/>
                            <xxf:context name="fr:title" value="$form-title"/>
                            <xxf:context name="fr:description" value="$form-description"/>
                            <xxf:context name="fr:mimetype" value="'application/pdf'"/>
                            <!-- Content as Base64 -->
                            <xxf:context name="fr:content" value="xxf:doc-base64($pdf-uri)"/>
                        </xf:dispatch>
                    </xf:action>
                    <!-- Send XML data if requested -->
                    <xf:action if="xxf:property(string-join(('oxf.fr.alfresco.send-xml', $app, $form), '.'))">

                        <xf:message level="xxf:log-debug">Sending XML to Alfresco...</xf:message>

                        <!-- Send data to Alfresco -->
                        <xf:dispatch target="fr-alfresco-model" name="alfresco-send-document">
                            <xxf:context name="fr:name" value="concat($form-title, ' (#', $document, ').xml')"/>
                            <xxf:context name="fr:title" value="$form-title"/>
                            <xxf:context name="fr:description" value="$form-description"/>
                            <xxf:context name="fr:mimetype" value="'application/xml'"/>
                            <!-- XML data -> string -> Base64 -->
                            <xxf:context name="fr:content" value="saxon:string-to-base64Binary(saxon:serialize(xxf:instance('fr-form-instance'), 'xml'), 'UTF-8')"/>
                        </xf:dispatch>
                    </xf:action>
                </xf:action>
            </xf:action>

            <!-- Send email if requested -->
            <xf:action if="$persistence-instance/is-error = 'false' and $is-send-email">
                <xf:message level="xxf:log-debug">Sending email...</xf:message>
                <xf:send submission="fr-email-service-submission"/>
            </xf:action>

            <!-- Navigate to the confirmation page if requested -->
            <xf:action if="$persistence-instance/is-error = 'false' and $is-send-navigate">
                <xf:message level="xxf:log-debug">Navigating to success page...</xf:message>
                <xf:send submission="fr-workflow-send-submission"/>
            </xf:action>
        </xf:action>

    </xf:action>

    <!-- Send to success page -->
    <xf:var name="workflow-success-uri" as="xs:anyURI"
        value="normalize-space((xxf:property(string-join(('oxf.fr.detail.send.uri', $app, $form), '.')),
                                 xxf:property(string-join(('oxf.fr.detail.send.success.uri', $app, $form), '.')))[normalize-space()][1])"/>
    <xf:var name="workflow-success-method" as="xs:string"
        value="lower-case(xxf:property(string-join(('oxf.fr.detail.send.success.method', $app, $form), '.')))"/>

    <!-- NOTE: keep non-relevant fields for now, as this is what's done for save/update. Should probably be configurable by the form author. -->
    <xf:submission id="fr-workflow-send-submission"
        resource="{formRunner:appendQueryString($workflow-success-uri, concat('app=', $app, '&amp;form=', $form, '&amp;document=', $document))}"
        relevant="{xxf:property(string-join(('oxf.fr.detail.send.success.prune', $app, $form), '.'))}"
        validate="false" method="{$workflow-success-method}"
        serialization="{if ($workflow-success-method = 'get') then 'none' else 'application/xml'}"
        ref="if (instance('fr-workflow-send-instance') != '') then instance('fr-workflow-send-instance') else xxf:instance('fr-form-instance')"
        replace="all"/>

    <!-- Send to error page -->
    <xf:var name="workflow-error-uri" as="xs:anyURI"
        value="normalize-space(xxf:property(string-join(('oxf.fr.detail.send.error.uri', $app, $form), '.')))"/>
    <xf:var name="workflow-error-method" as="xs:string"
        value="lower-case(xxf:property(string-join(('oxf.fr.detail.send.error.method', $app, $form), '.')))"/>

    <xf:submission id="fr-workflow-error-submission"
        resource="{$workflow-error-uri}"
        relevant="false" validate="false" method="{$workflow-error-method}"
        serialization="{if ($workflow-error-method = 'get') then 'none' else 'application/xml'}"
        ref="if (instance('fr-workflow-send-instance') != '') then instance('fr-workflow-send-instance') else xxf:instance('fr-form-instance')"
        replace="all"/>

    <!-- Call email service -->
    <xf:submission id="fr-email-service-submission"
        resource="/fr/service/{$app}/{$form}/email/{$document}?fr-language={xxf:instance('fr-language-instance')}{if (property('xxf:noscript')) then '&amp;fr-noscript=true' else ''}"
        relevant="false" validate="false" method="post" ref="xxf:instance('fr-form-instance')" replace="none"/>

    <!-- Call PDF service -->
    <xf:submission id="fr-pdf-service-submission"
        resource="/fr/service/{$app}/{$form}/pdf/{$document}?fr-language={xxf:instance('fr-language-instance')}{if (property('xxf:noscript')) then '&amp;fr-noscript=true' else ''}"
        relevant="false" validate="false" method="post" ref="xxf:instance('fr-form-instance')"
        replace="instance" instance="fr-workflow-send-instance"/>

    <xf:instance id="fr-workflow-send-instance">
        <uri/>
    </xf:instance>

    <!-- Mark all active alerts as visited -->
    <xxf:script ev:event="fr-visit-alerts">
        <![CDATA[
        var rootElement = ORBEON.util.Dom.get("fr-form");
        var elements = YAHOO.util.Dom.getElementsByClassName("xforms-alert-active", "label", rootElement);
        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            YAHOO.util.Dom.addClass(element, "xforms-alert-active-visited")
        }
        ]]>
    </xxf:script>

    <!-- React to issue loading the document. We consider this fatal. -->
    <xf:action ev:event="xforms-submit-error" ev:target="fr-get-document-submission" type="xpath">
        formRunner:sendError((event('response-status-code'), 500)[1])
    </xf:action>

    <!-- React to failed submission -->
    <xf:action ev:event="xforms-submit-error"
                   ev:target="fr-create-update-submission fr-create-update-attachment-submission fr-get-document-submission fr-pdf-service-submission fr-email-service-submission">
        <xf:dispatch name="fr-persistence-error" targetid="fr-persistence-model">
            <xxf:context name="submission-id" value="event('xxf:targetid')"/>
            <xxf:context name="response-body" value="event('response-body')"/>
            <xxf:context name="error-type" value="event('error-type')"/>
        </xf:dispatch>
    </xf:action>

    <xf:action ev:event="fr-persistence-error">
        <!-- Remember there was an error -->
        <xf:setvalue ref="$persistence-instance/is-error">true</xf:setvalue>
        <!-- Log error -->
        <xf:message if="event('submission-id')" level="xxf:log-debug">Error with submission: <xf:output value="event('submission-id')"/></xf:message>
        <xf:message if="event('response-body')" level="xxf:log-debug"><xf:output value="event('response-body')"/></xf:message>

        <!-- case validation-error => update UI and open error dialog -->
        <xf:action if="event('error-type') = 'validation-error'">
            <!-- Mark all active alerts as visited -->
            <xf:dispatch name="fr-visit-alerts" target="fr-persistence-model"/>
            <!-- Open all sections -->
            <xf:dispatch name="fr-expand-all" target="fr-sections-model"/>
            <!-- Open error dialog -->
            <xf:dispatch name="fr-show" targetid="fr-error-dialog">
                <xxf:context name="message" model="fr-resources-model" value="$fr-fr-resources/detail/messages/form-validation-error"/>
            </xf:dispatch>
        </xf:action>

        <!-- case xxforms-pending-uploads => open error dialog -->
        <xf:action if="event('error-type') = 'xxforms-pending-uploads'">
            <xf:dispatch name="fr-show" targetid="fr-error-dialog">
                <xxf:context name="message" model="fr-resources-model" value="$fr-fr-resources/detail/messages/upload-in-progress"/>
            </xf:dispatch>
        </xf:action>

        <!-- case _ => send error submission or open error dialog -->
        <xf:action if="not(event('error-type') = ('validation-error', 'xxforms-pending-uploads'))">
            <!-- Call error submission if defined -->
            <xf:send if="$workflow-error-uri != ''" submission="fr-workflow-error-submission"/>
            <!-- Open error dialog -->
            <xf:dispatch if="$workflow-error-uri = ''" name="fr-show" targetid="fr-error-dialog">
                <xxf:context name="message" model="fr-resources-model" value="$fr-fr-resources/detail/messages/database-error"/>
            </xf:dispatch>
        </xf:action>
    </xf:action>

    <!-- Clear message -->
    <xf:action ev:observer="#document" ev:event="DOMFocusIn">
        <xf:toggle case="fr-message-none"/>
        <xf:setvalue ref="$persistence-instance/message"/>
    </xf:action>

    <!-- React to instance mutation events -->
    <!-- NOTE: We check the standard fr-form-instance, but also fb-form-instance, which is where Form Builder really does its work  -->
    <xf:action ev:observer="fr-form-instance fb-form-instance" ev:event="xforms-insert xforms-delete xxforms-value-changed">
        <!-- In 'new' and 'edit' modes only, mark status as dirty if data changes -->
        <xf:setvalue if="$mode = ('new', 'edit')" ref="$persistence-instance/data-status">dirty</xf:setvalue>
    </xf:action>

</xf:model>
